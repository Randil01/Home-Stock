import React, { useState, useEffect, useRef } from "react";
import axios from "axios";
import { Table, Form, Button, Card, Collapse, Row, Col } from "react-bootstrap";
import AssetChart from "./AssetChart";
import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";

const AssetManager = () => {
  const [assets, setAssets] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");  // State for search term
  const formRef = useRef(null);

  useEffect(() => {
    const fetchAssets = async () => {
      try {
        const res = await axios.get("http://localhost:5000/api/assets/display");
        setAssets(res.data);
      } catch (err) {
        console.error("Error fetching assets:", err);
      }
    };
    fetchAssets();
  }, []);

  const generatePDF = () => {
    const doc = new jsPDF();
    doc.text("Asset Report", 20, 10);
    const headers = [["Name", "Category", "Value (LKR)", "Purchase Date"]];
    const data = assets.map(asset => [
      asset.name,
      asset.category,
      `LKR ${asset.value}`,
      new Date(asset.purchase_date).toLocaleDateString()
    ]);

    autoTable(doc, {
      head: headers,
      body: data,
      startY: 20,
      theme: 'grid',
      styles: { fontSize: 10 },
      headStyles: { fillColor: [22, 160, 133] }
    });

    doc.setFontSize(10);
    doc.text("Generated by Home Stock Management System", 20, doc.internal.pageSize.height - 10);
    doc.save("asset_report.pdf");
  };

  // Filter assets based on the search term
  const filteredAssets = assets.filter(
    asset =>
      asset.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      asset.category.toLowerCase().includes(searchTerm.toLowerCase()) ||
      asset.value.toString().includes(searchTerm)
  );

  return (
    <div className="container py-4">
      <h2 className="mb-4 text-center fw-bold">🏠 Asset Management</h2>

      <div className="d-flex justify-content-center gap-3 mb-4">
        <Button
          variant={showForm ? "outline-secondary" : "outline-primary"}
          onClick={() => setShowForm(!showForm)}
        >
          {showForm ? "Hide Asset Form" : "➕ Add Asset"}
        </Button>
        <Button variant="outline-success" onClick={generatePDF}>
          📄 Generate PDF
        </Button>
      </div>

      <Collapse in={showForm}>
        <div ref={formRef}>
          <Card className="mb-4 shadow-sm">
            <Card.Body>
              <h5 className="mb-3">Add New Asset</h5>
              <AssetForm setAssets={setAssets} />
            </Card.Body>
          </Card>
        </div>
      </Collapse>

      {/* Search Bar */}
      <Card className="mb-4 shadow-sm">
        <Card.Body>
          <h5 className="mb-3">🔍 Search Assets</h5>
          <Form.Control
            type="text"
            placeholder="Search by name, category, or value"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </Card.Body>
      </Card>

      <Card className="mb-4 shadow-sm">
        <Card.Body>
          <h5 className="mb-3">📋 Asset List</h5>
          <AssetList assets={filteredAssets} setAssets={setAssets} />
        </Card.Body>
      </Card>

      <Card className="mb-4 shadow-sm">
        <Card.Body>
          <h5 className="mb-3">📊 Asset Visualization</h5>
          <AssetChart assets={filteredAssets} />
        </Card.Body>
      </Card>
    </div>
  );
};

const AssetForm = ({ setAssets }) => {
  const [formData, setFormData] = useState({
    name: "",
    category: "",
    value: "",
    purchase_date: "",
  });

  const categories = ["Electronics", "Furniture", "Vehicles", "Appliances", "Others"];

  const handleSubmit = async (e) => {
    e.preventDefault();
    const lkrValue = parseFloat(formData.value);
    if (isNaN(lkrValue) || lkrValue <= 0) {
      alert("Please enter a valid amount in LKR.");
      return;
    }

    try {
      const res = await axios.post("http://localhost:5000/api/assets/add", {
        ...formData,
        value: lkrValue,
      });

      const newAsset = res.data.asset || res.data;
      setAssets((prev) => [...prev, newAsset]);
      setFormData({ name: "", category: "", value: "", purchase_date: "" });
    } catch (error) {
      console.error("Error adding asset:", error.response?.data?.message || error.message);
    }
  };

  return (
    <Form onSubmit={handleSubmit}>
      <Row className="mb-3">
        <Col md={6}>
          <Form.Control
            placeholder="Asset Name"
            value={formData.name}
            onChange={(e) => setFormData({ ...formData, name: e.target.value })}
            required
          />
        </Col>
        <Col md={6}>
          <Form.Select
            value={formData.category}
            onChange={(e) => setFormData({ ...formData, category: e.target.value })}
            required
          >
            <option value="" disabled>Select Category</option>
            {categories.map((cat, idx) => (
              <option key={idx} value={cat}>{cat}</option>
            ))}
          </Form.Select>
        </Col>
      </Row>
      <Row className="mb-3">
        <Col md={6}>
          <Form.Control
            type="number"
            placeholder="Value (LKR)"
            value={formData.value}
            onChange={(e) => setFormData({ ...formData, value: e.target.value })}
            required
          />
        </Col>
        <Col md={6}>
          <Form.Control
            type="date"
            value={formData.purchase_date}
            onChange={(e) => setFormData({ ...formData, purchase_date: e.target.value })}
            required
          />
        </Col>
      </Row>
      <Button type="submit" variant="primary">➕ Add Asset</Button>
    </Form>
  );
};

const AssetList = ({ assets, setAssets }) => {
  const [editId, setEditId] = useState(null);
  const [editData, setEditData] = useState({ name: "", category: "", value: "", purchase_date: "" });

  const handleDelete = async (id) => {
    await axios.delete(`http://localhost:5000/api/assets/delete/${id}`);
    setAssets(assets.filter((a) => a._id !== id));
  };

  const handleEdit = (asset) => {
    setEditId(asset._id);
    setEditData({
      name: asset.name,
      category: asset.category,
      value: asset.value,
      purchase_date: asset.purchase_date.split("T")[0],
    });
  };

  const handleUpdate = async (id) => {
    await axios.put(`http://localhost:5000/api/assets/update/${id}`, editData);
    setAssets(assets.map((a) => (a._id === id ? { ...a, ...editData } : a)));
    setEditId(null);
  };

  return (
    <div className="table-responsive">
      <Table bordered hover className="align-middle text-center">
        <thead className="table-light">
          <tr>
            <th>Name</th>
            <th>Category</th>
            <th>Value (LKR)</th>
            <th>Purchase Date</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {assets.map((asset) => (
            <tr key={asset._id}>
              <td>
                {editId === asset._id ? (
                  <Form.Control
                    value={editData.name}
                    onChange={(e) => setEditData({ ...editData, name: e.target.value })}
                  />
                ) : asset.name}
              </td>
              <td>
                {editId === asset._id ? (
                  <Form.Control
                    value={editData.category}
                    onChange={(e) => setEditData({ ...editData, category: e.target.value })}
                  />
                ) : asset.category}
              </td>
              <td>
                {editId === asset._id ? (
                  <Form.Control
                    type="number"
                    value={editData.value}
                    onChange={(e) => setEditData({ ...editData, value: e.target.value })}
                  />
                ) : `LKR ${asset.value}`}
              </td>
              <td>
                {editId === asset._id ? (
                  <Form.Control
                    type="date"
                    value={editData.purchase_date}
                    onChange={(e) => setEditData({ ...editData, purchase_date: e.target.value })}
                  />
                ) : new Date(asset.purchase_date).toLocaleDateString()}
              </td>
              <td>
                {editId === asset._id ? (
                  <Button variant="success" size="sm" onClick={() => handleUpdate(asset._id)}>💾 Save</Button>
                ) : (
                  <>
                    <Button variant="warning" size="sm" onClick={() => handleEdit(asset)} className="me-2">✏️</Button>
                    <Button variant="danger" size="sm" onClick={() => handleDelete(asset._id)}>🗑️</Button>
                  </>
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </Table>
    </div>
  );
};

export default AssetManager;
